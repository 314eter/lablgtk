<?xml version="1.0"?>
<repository>
<types>
  <conv c="a" ml="b"/>
</types>
<ml_header>
open Gobject
open Data
module Object = GtkWidget
let may_cons = Property.may_cons
let may_cons_opt = Property.may_cons_opt
</ml_header>
<c_header><![CDATA[
#include <string.h>
#include <caml/mlvalues.h>
#include <caml/alloc.h>
#include <caml/memory.h>
#include <caml/callback.h>
#include <caml/fail.h>
//#include "../../wrappers.h"
//#include "../../ml_gobject.h"
]]></c_header>
<ml_function><![CDATA[

module Main = struct
  open StdLabels
  open Gtk
  let () = Callback.register_exception "gtkerror" (Error"")
  let () = Gc.set {(Gc.get()) with Gc.max_overhead = 1000000}
  external init : string array -> string array = "ml_gtk_init"
  (* external set_locale : unit -> string = "ml_gtk_set_locale" *)
  external disable_setlocale : unit -> unit = "ml_gtk_disable_setlocale"
  (* external main : unit -> unit = "ml_gtk_main" *)
  let init ?(setlocale=true) () =
    let setlocale =
      try Sys.getenv "GTK_SETLOCALE" <> "0" with Not_found -> setlocale in
    if not setlocale then disable_setlocale ();
    let argv =
      try
	init Sys.argv
      with Error err ->
        raise (Error ("GtkMain.init: initialization failed\n" ^ err))
    in
(*    if setlocale then ignore (Glib.Main.setlocale `NUMERIC (Some "C"));*)

    Array.blit ~src:argv ~dst:Sys.argv ~len:(Array.length argv)
      ~src_pos:0 ~dst_pos:0;
    Obj.truncate (Obj.repr Sys.argv) (Array.length argv)
(*     if setlocale then Glib.Main.setlocale `ALL None else ""*)

  let loops = ref ([] : [`mainloop] obj list)
  let default_main () =
    let loop = (Stubs_GLib.MainLoop.create None true) in
    loops := loop :: !loops;
    while Stubs_GLib.MainLoop.is_running loop do
       Stubs_GLib.MainContext.iteration (Stubs_GLib.MainLoop.get_context loop) true
    done;
    if !loops <> [] then loops := List.tl !loops
  let main_func = ref default_main
  let main () = !main_func ()
  let quit () = if !loops <> [] then Stubs_GLib.MainLoop.quit (List.hd !loops)
  external get_current_event_time : unit -> int32
    = "ml_gtk_get_current_event_time"
end
]]></ml_function>
<c_function><![CDATA[
void ml_raise_gtk (const char *errmsg)
{
  static value * exn = NULL;
  if (exn == NULL)
      exn = caml_named_value ("gtkerror");
  raise_with_string (*exn, (char*)errmsg);
}


CAMLprim value ml_gtk_init (value argv)
{
    CAMLparam1 (argv);
    int argc = Wosize_val(argv), i;
    CAMLlocal1 (copy);

    copy = (argc ? alloc (argc, Abstract_tag) : Atom(0));
    for (i = 0; i < argc; i++) Field(copy,i) = Field(argv,i);
    if( !gtk_init_check (&argc, (char ***)&copy) ){
      ml_raise_gtk ("ml_gtk_init: initialization failed");
    }

    argv = (argc ? alloc (argc, 0) : Atom(0));
    for (i = 0; i < argc; i++) modify(&Field(argv,i), Field(copy,i));
    CAMLreturn (argv);
}
]]>
</c_function>
<enumeration>
  <badtag cname="GTK_CELL_RENDERER_ACCEL_MODE_MODIFIER_TAP"/>
</enumeration>
</repository>