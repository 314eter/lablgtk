
		LablGTK : an interface to the GIMP Tool Kit


Needed:
	olabl-2.00
	gtk-1.0.x
	gmake (standard make may work with a twist)

How to compile:

	Just type "make".
	If anything changed, type "make configure; make".

	On FreeBSD, you need to link with libxpg4.so for Japanese
	output.

Contents:

	gdk.ml		low-level interface to the General Drawing Kit
	gtk.ml		low-level interface to the GIMP Tool Kit
	gtkThread.ml	main loop for threaded version
	gtkObj.ml	object-oriented interface to GTK

	lablgtk		normal toplevel
	lablgtk_t	threaded toplevel

	examples/*.ml	various examples

	olabl.diffs		patch to apply to olabl-2.00
	lablbrowser.diffs	patch to apply to labltk41-2.00

How to run the examples:

	./lablgtk examples/???.ml

  some examples (e.g. buttons.ml) may need to be run from the examples
  directory

	../lablgtk -I .. ???.ml

How to use the threaded toplevel:

	% ./lablgtk_t
	        Objective Caml version 2.00 with Kyoto labels and variants
	
	# let id = Thread.create GtkThread.main ();;
	val id : Thread.t = <abstr>

  The GTK main loop is now running in a separate thread. Any command
  is immediately reflected by the system.
  Beware that you cannot switch threads within a callback, that is the
  only thread related command you may use in a callback is
  Thread.create. On the other hand, all newly created threads will be
  run directly by the caml main loop, so they can use all thread
  operations.

Structure of the (raw) Gtk module:

  This module is composed of one submodule for each class.
  Signals specific to a widget are in a Signals inner module.
  Also, you can use "set w param: value" in place of "set_param w value".
  The set function has a weak form of inheritance: it provides access
  to all parameters in superclasses.

Structure of the GtkObj module:

  Up to 3 classes and two functions are defined for each widget:
  * a skeleton class mywidget_skel providing widget-specific methods
    (except the set function, which cannot be inherited)
  * a connection class mywidget_signals allowing to connect signals
  * a "set" function, to set all parameters available
  For all these, inheritance follows the widget hierarchy
  * the real class, which has basically the following definition
	class mywidget obj = object
	  inherit [MyWidget.t] mywidget_skel obj
	  method connect = new mywidget_signals obj
	  method set = MyWidget.set ?obj
	end
  * a constructor function, new_mywidget.

  This means that contrary to mywidget_skel and mywidget_signals,
  mywidget is not a subtype of its superclasses. However you can
  coerce any widget to the widgeter class.

  Practically, each widget class is composed of:
  * a raw method, returning the raw Gtk.obj handle
  * a widget method, returing the same handle coerced to [widget] Gtk.obj.
    this is needed for technical reasons
  * a misc sub-object, giving access to miscellanous functionality of
    the basic gtkwidget class
  * a connect sub-object, allowing one to connect all available signals
  * a connect#event sub-object, for event signals
  * various methods inherited from the widget_skel object, itself
    inheriting from superclasses
  * a set method
  * possibly some widget specific methods, not inherit by subclasses

Memory management:

  Important efforts have been dedicated to cooperate with Gtk's
  reference counting mechanism. As a result you should generally be
  able to use Gdk/Gtk data structures without caring about memory
  management. They will be freed when nobody points to them any more.
  This also means that you do not need to pay too much attention to
  wether a data structure is still alive or not. If it is not, you
  should get an error rather than a core dump.
  The case of Gtk objects deserves special care. Since they are
  interactive, we cannot just destroy them when they are no longer
  referenced. They have to be explicitely destroyed. If a widget was
  added to a container widget, it will automatically be destroyed when
  its last container is destroyed. For this reason you should only
  destroy toplevel widgets, and be careful about not loosing all
  references to a still unused widget.
				   
Bug reports:
	Jacques Garrigue
	garrigue@kurims.kyoto-u.ac.jp

$Id$