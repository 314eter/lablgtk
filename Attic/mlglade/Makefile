#
# $Id$
# $Name$
#


# 
# basic variables and rules for compiling Objective Caml projects
# are imported from the top level to ensure consistency.
#

TOPLEVEL =	.
include 	$(TOPLEVEL)/Makefile.ocaml

#
# Name and version for binaries and tar files
#

NAME =		mlglade
VERSION =       0.1

# Default target is 'all'

all::		ALWAYS DEPEND
all.opt::	ALWAYS DEPEND

# realclean includes clean'ing

realclean::	clean

# -----------------------------------------------------------------------------
# Important Variables
# -----------------------------------------------------------------------------

#
# enter ML sources generated by some tool below.  These are usually lex
# and yacc generated files.
#

GENERATED = regen.ml xmlparse.ml xmlparse.mli xmlscan.ml this.ml

clean::;	rm -f $(GENERATED) mlglade a.out xmlparse.output

# Files made in this directory from source files. They make up the
# executable.

CMO = 		regen.cmo error.cmo xml.cmo xmlstate.cmo xmlparse.cmo \
		xmlscan.cmo this.cmo glade.cmo main.cmo

CMX =		$(CMO:.cmo=.cmx)
OBJ =		$(CMO:.cmo=.o)
CMI =		$(CMO:.cmo=.cmi)

# Some cmo files depend on modules from mylib - make sure they are
# there.

$(CMO):		mylib
$(CMX):		mylib.opt

clean::; 	rm -f $(CMO) $(CMX) $(OBJ) $(CMI)

#
# Mylib - this library contains some generic modules. MYLIB contains
# the path to the directory that holds the library.
#

MYLIB =			./mylib

all     mylib    ::;	cd $(MYLIB) && $(MAKE) all
all.opt mylib.opt::;	cd $(MYLIB) && $(MAKE) all.opt

clean::; 		cd $(MYLIB) && $(MAKE) clean
realclean::;		cd $(MYLIB) && $(MAKE) realclean

#
# Compiler flags used in Makefile.ocaml for compiling
#

INCLUDE =	-I $(MYLIB)
CFLAGS = 	$(INCLUDE)
OFLAGS = 	$(INCLUDE) -unsafe -noassert
OFLAGS = 	$(INCLUDE) 

# -----------------------------------------------------------------------------
# Targets
# -----------------------------------------------------------------------------

all::		$(NAME)
all.opt::	$(NAME).opt


$(NAME):	$(CMO) mylib
		$(CAMLC) $(CFLAGS) -o $@ mylib.cma $(CMO)

$(NAME).opt:	$(CMX) mylib.opt
		$(CAMLOPT) $(OFLAGS) -o $@ mylib.cmxa $(CMX)

realclean::; 	rm -f $(NAME) $(NAME).opt

#
# Gemerate source file with version and name information

this.ml:	this.in
		sed 	-e 's/@this@/$(NAME)-$(VERSION)/'\
			-e 's/@arch@/$(ARCH)/'\
		this.in > $@

# 
# cmo: just make all .cmo files (for interactive use in the toplevel)
#

cmo:		$(CMO)

# -----------------------------------------------------------------
# build a source/binary distribution
# -----------------------------------------------------------------

FILES.BIN:	ALWAYS
		find .							\
			-name CVS 				-prune	\
			-o -name 'Makefile*'			-prune  \
			-o -name '*.o' 				-prune	\
			-o -name '*.cmi' 			-prune	\
			-o -name '*.ml[iyl]'			-prune  \
			-o -name '*.ml'  			-prune  \
			-o -name '*.cmo'			-prune 	\
			-o -name '*.cma'			-prune 	\
			-o -name '*.cmxa'			-prune 	\
			-o -name '*.cmx'			-prune  \
			-o -name '*.in'				-prune  \
			-o -name '*.tar*'			-prune  \
			-o -name '*.tmp*'			-prune  \
			-o -name '*.output'			-prune  \
                        -o -name 'FILES.*'                      -prune  \
                        -o -type f -print | sort | 			\
		sed 	-e 's|^\./|$(NAME)-$(VERSION)/|'  > $@

FILES.SRC:	ALWAYS
		find .  -follow						\
			-name CVS 				-prune	\
			-o -name '*.a' 				-prune	\
			-o -name '*.o' 				-prune	\
			-o -name '*.cmi' 			-prune	\
			-o -name '*.cmo'			-prune 	\
			-o -name '*.cma'			-prune 	\
			-o -name '*.cmxa'			-prune 	\
			-o -name '*.cmx'			-prune  \
			-o -name '*.tar*'			-prune  \
			-o -name '*.tmp*'			-prune  \
			-o -name '*.sig'			-prune  \
			-o -name '*.output'			-prune  \
                        -o -name 'FILES.*'                      -prune  \
			-o -name '$(NAME)'                      -prune  \
                        -o -name '$(NAME).opt'                  -prune  \
		     	-o -type f -print				\
			| sort | 			\
		sed 	-e 's|^\./|$(NAME)-$(VERSION)/|'  > $@

                        

DIST =          $(NAME)-$(VERSION).tar.gz

dist:           $(DIST)

$(DIST):	FILES.SRC
		ln -s . $(NAME)-$(VERSION) 
		tar cvhf - `cat FILES.SRC` | gzip > $@
		rm -f $(NAME)-$(VERSION)
		rm -f FILES.SRC 

# 
# -----------------------------------------------------------------------------
# phony targets
# -----------------------------------------------------------------------------

# all code created by generators must be there before dependencies
# are calculated!


depend:		DEPEND ALWAYS

DEPEND:		$(GENERATED)
		$(CAMLDEP) $(INCLUDE) *.mli *.ml > DEPEND

tags:		ALWAYS
		mltags *.mli $(MYLIB)/*.mli *.ml $(MYLIB)/*.ml

clean::;	rm -f tags

#
# dummy target
#

ALWAYS:

# -----------------------------------------------------------------------------
# dependencies - include manually if your make does not support include
# -----------------------------------------------------------------------------

-include DEPEND
