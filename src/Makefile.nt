# $Id$
# Makefile for lablgtk.

EXE = .exe
CONFIG = ..\config.make
TARGETS = varcc lablgtk$(EXE) lablgtk_t$(EXE) lablgtkrun$(EXE) $(CONFIG)

all: $(TARGETS)

opt: lablgtkopt

depend:
	ocamldep *.ml *.mli > .depend

COMPILER = $(CAMLC) $(MLFLAGS) -w s -labels -c
LINKER = $(CAMLC) $(MLFLAGS)
COMPOPT = $(CAMLOPT) $(MLFLAGS) -w s -labels -c
LINKOPT = $(CAMLOPT) $(MLFLAGS)
TOPLEVEL = ocamlmktop $(MLFLAGS)
### How to invoke the librarian
MKLIB=lib /nologo /debugtype:CV /out:

!include $(CONFIG)

INSTALLDIR = $(LIBDIR:/=\)\lablgtk
BINDIR = $(LIBDIR:/=\)\..\bin
LABLGLDIR = $(LIBDIR)/lablGL

MLLIBS = lablgtk.cma
CLIBS = liblablgtk.lib
MLLINK = unix.cma str.cma

CFLAGS = -O -DGTK_NO_CHECK_CASTS -DGTK_DISABLE_COMPAT_H $(GTKCFLAGS)

THFLAGS = -thread
THLINK = unix.cma threads.cma

!if $(USE_CC) == 1
CCOMPILER = $(CC) -c -I$(LIBDIR) $(CFLAGS)
!else
CCOMPILER = ocamlc -c -ccopt "$(CFLAGS)"
!endif

ifdef USE_GL
MLFLAGS += -I $(LABLGLDIR)
MLLINK += lablgl.cma
MLLIBS += lablgtkgl.cma
CLIBS += liblablgtkgl.lib
GLLINK = -cclib -llablgtkgl -cclib -lgtkgl
GLMLOBJS = glGtk.cmo
GLCOBJS = ml_gtkgl.obj
!endif

# Rules
.SUFFIXES: .ml .mli .cmo .cmi .cmx .c .obj .var .h .opt .def
.c.obj:
	$(CCOMPILER) $<
.ml.cmo:
	$(COMPILER) $<
.mli.cmi:
	$(COMPILER) $<
.ml.cmx:
	$(COMPOPT) $<
.var.h:
	ocamlrun ./varcc $<

# Targets
GTKOBJS = ml_gtk.o ml_gtkbin.o ml_gtkbutton.o ml_gtkedit.o ml_gtklist.o \
	ml_gtkmenu.o ml_gtkmisc.o ml_gtknew.o ml_gtkpack.o ml_gtkrange.o \
	ml_gtktree.o
COBJS = ml_gdk.o ml_glib.o wrappers.o $(GTKOBJS)
MLOBJS = gaux.cmo gpointer.cmo glib.cmo gdk.cmo gdkEvent.cmo gdkKeysyms.cmo \
	gtk.cmo gtkArgv.cmo gtkSignal.cmo \
	gtkData.cmo gtkBase.cmo gtkPack.cmo gtkButton.cmo \
	gtkMenu.cmo gtkMisc.cmo gtkWindow.cmo gtkTree.cmo gtkList.cmo \
	gtkBin.cmo gtkEdit.cmo gtkRange.cmo gtkMain.cmo gtkNew.cmo \
	gDraw.cmo \
	gObj.cmo gMain.cmo gData.cmo gContainer.cmo gPack.cmo gButton.cmo \
	gMenu.cmo gMisc.cmo gWindow.cmo gTree.cmo gList.cmo gBin.cmo \
	gEdit.cmo gRange.cmo gUtil.cmo
THOBJS = gtkThread.cmo
INITOBJS = gtkInit.cmo
THINITOBJS = gtkThInit.cmo
ALLOBJS = $(MLOBJS) $(GLMLOBJS) $(GNOMEMLOBJS) $(GLADEMLOBJS) $(THOBJS) \
	$(INITOBJS) $(THINITOBJS)

lablgtk$(EXE): $(CLIBS) $(MLLIBS) $(INITOBJS)
	$(TOPLEVEL) -o $@ $(MLLINK) -I . $(MLLIBS) $(INITOBJS)

lablgtk_t: $(CLIBS) $(MLLIBS) $(THOBJS) $(INITOBJS) $(THINITOBJS)
	$(TOPLEVEL) $(THFLAGS) -o $@ $(THLINK) $(MLLINK) \
	   -I . $(MLLIBS) $(THOBJS) $(INITOBJS) $(THINITOBJS)

lablgtkrun$(EXE): $(CLIBS) $(MLLIBS)
	$(LINKER) -o $@ -make-runtime $(MLLINK) -I . $(MLLIBS)

lablgtkopt: $(CLIBS) $(MLLIBS:.cma=.cmxa) $(INITOBJS:.cmo=.cmx) \
	$(THOBJS:.cmo=.cmx)

install:
	if not exist $(INSTALLDIR) mkdir $(INSTALLDIR)
	cp $(ALLOBJS:.cmo=.cmi) $(INSTALLDIR)
	cp *.mli $(INSTALLDIR)
	cp $(ALLOBJS:.cmo=.ml) $(INSTALLDIR)
	cp $(MLLIBS) $(THOBJS) $(INITOBJS) $(THINITOBJS) $(INSTALLDIR)
	cp $(CLIBS) $(INSTALLDIR)
	cp lablgtk$(EXE) lablgtk_t$(EXE) lablgtkrun$(EXE) $(BINDIR)
	cp varcc *.h $(INSTALLDIR)
	if test -f lablgtk.cmxa; then \
	   cp $(MLLIBS:.cma=.cmxa) $(MLLIBS:.cma=.lib) \
	      $(INITOBJS:.cmo=.cmx) $(INITOBJS:.cmo=.obj) $(INSTALLDIR); fi
	if test -f gtkThread.cmx; then \
	   cp $(THOBJS:.cmo=.cmx) $(THOBJS:.cmo=.obj) $(INSTALLDIR); fi

liblablgtk.lib: $(COBJS)
	$(MKLIB)$@ $(COBJS)

lablgtk.cma: $(MLOBJS)
	$(LINKER) -a -custom -o $@ $(MLOBJS) \
	  -cclib -llablgtk $(GTKLIBS)
lablgtk.cmxa: $(MLOBJS:.cmo=.cmx)
	$(LINKOPT) -a -o $@ $(MLOBJS:.cmo=.cmx) \
	  -cclib -llablgtk $(GTKLIBS)

gtkThread.cmo: gtkThread.ml
	$(COMPILER) $(THFLAGS) gtkThread.ml

gtkThread.cmx: gtkThread.ml
	$(COMPOPT) $(THFLAGS) gtkThread.ml

varcc: varcc.cmo
	$(LINKER) -o $@ varcc.cmo
	rm -f *_tags.h *_tags.c

clean:
	rm -f *.cm* *.obj *.lib *_tags.[ch] $(TARGETS)

config.make: config.make.nt
	cp ../config.make.nt ../config.make

depend .depend:
	ocamldep *.ml *.mli > .depend

ml_gtk.obj: gtk_tags.c gtk_tags.h ml_gtk.h ml_gdk.h wrappers.h
ml_gdk.obj: gdk_tags.c gdk_tags.h ml_gdk.h wrappers.h
ml_gtkgl.obj: gtkgl_tags.c gtkgl_tags.h ml_gtk.h ml_gdk.h wrappers.h

!include .depend
