# $Id$
# Makefile for lablgtk.

EXE = .exe

all:: $(TARGETS)

opt: lablgtkopt

depend:
	ocamldep *.ml *.mli > .depend

COMPILER = $(CAMLC) $(MLFLAGS) $(MLBYTEFLAGS) -w s -c
LINKER = $(CAMLC) $(MLFLAGS) $(MLBYTEFLAGS)
COMPOPT = $(CAMLOPT) $(MLFLAGS) -w s -c
LINKOPT = $(CAMLOPT) $(MLFLAGS)
LIBRARIAN = NO LIBRARIAN

MKLIB = lib /nologo /debugtype:CV /out:
MKDLL = link /nologo /dll "`ocamlc -where`/ocamlrun.lib" /out:
TOPLEVEL = ocamlmktop -verbose $(MLFLAGS)
CAMLP4 = camlp4o -I "$(LIBDIR)/camlp4" pr_o.cmo
DLLDIR = $(LIBDIR)/stublibs

TOPLEVEL = $(CAMLMKTOP) $(MLFLAGS)
CAMLP4 = $(CAMLP4O) pr_o.cmo
CONFIG = ../config.make.nt

# protect against missing definitions
BINDIR = ""
LIBDIR = ""
INSTALLDIR = $(LIBDIR)/lablgtk2
DLLDIR = $(LIBDIR)/stublibs

include $(CONFIG)

TARGETS = varcc lablgtktop$(EXE) lablgtktop_t$(EXE) lablgladecc$(EXE)

all: byte

byte: $(TARGETS)
opt:  $(TARGETS) lablgtkopt

depend:
	ocamldep *.ml *.mli > .depend


LABLGLDIR = $(LIBDIR)/lablGL

MLLIBS = lablgtk.cma
CLIBS = liblablgtk2.lib
MLLINK = unix.cma str.cma

ifdef DEBUG
CFLAGS = -g $(GTKCFLAGS)
MLLINK = -custom
#MLLINK += -cclib -lcamlrund
MLBYTEFLAGS = -g
else
CFLAGS = -O -DG_DISABLE_CAST_CHECKS $(GTKCFLAGS)
endif

THFLAGS = -thread
THLINK = unix.cma threads.cma

ifdef USE_GL
MLFLAGS += -I "$(LABLGLDIR)"
MLLINK += lablgl.cma
MLLIBS += lablgtkgl.cma
CLIBS += liblablgtkgl2.lib
GLLINK = -cclib -llablgtkgl -cclib -lgtkgl
GLMLOBJS = glGtk.cmo
GLCOBJS = ml_gtkgl.obj
endif

ifdef USE_GLADE
# MLLIBS += lablglade.cma
# CLIBS += liblablglade2.lib
# GLADELINK = -cclib -llablglade2 -cclib -lglade
# GLADEMLOBJS = glade.cmo
# GLADECOBJS = ml_glade.obj

GLADELINK = -cclib -llablglade2 -cclib -lglade
MLOBJS += glade.cmo
COBJS += ml_glade.obj

endif


# Rules
.SUFFIXES: .ml .mli .cmo .cmi .cmx .c .obj .d.obj .var .h .opt .def .ml4
.c.obj:
	$(COMPILER) -verbose -ccopt "$(CFLAGS)" $<
.c.d.obj:
	$(COMPILER) -verbose -ccopt "/MD /Fo$@ $(CFLAGS)" $<
.ml.cmo:
	$(COMPILER) $<
.mli.cmi:
	$(COMPILER) $<
.ml.cmx:
	$(COMPOPT) $<
.var.h:
	ocamlrun ./varcc $<
.ml4.ml:
	$(CAMLP4) -impl $< -o $@

# Targets
GTKOBJS =  ml_gtk.obj ml_pango.obj ml_gtkbin.obj ml_gtkbutton.obj ml_gtkedit.obj \
	ml_gtklist.obj ml_gtkmenu.obj ml_gtkmisc.obj ml_gtkpack.obj ml_gtkrange.obj \
	ml_gtktext.obj ml_gtktree.obj ml_gtkstock.obj
COBJS = ml_gdkpixbuf.obj ml_gdk.obj ml_glib.obj ml_gobject.obj ml_gpointer.obj \
	wrappers.obj $(GTKOBJS)
MLOBJS =  gaux.cmo gpointer.cmo glib.cmo gobject.cmo \
	gdk.cmo gdkEvent.cmo gdkKeysyms.cmo gdkPixbuf.cmo \
	gtk.cmo pango.cmo gtkSignal.cmo \
	gtkData.cmo gtkStock.cmo gtkBase.cmo gtkPack.cmo gtkButton.cmo \
	gtkMenu.cmo gtkMisc.cmo gtkWindow.cmo gtkList.cmo \
	gtkBin.cmo gtkEdit.cmo gtkRange.cmo gtkText.cmo gtkTree.cmo \
	gtkMain.cmo \
	gPango.cmo gDraw.cmo \
	gObj.cmo gMain.cmo gData.cmo gContainer.cmo gPack.cmo gButton.cmo \
	gText.cmo \
	gMenu.cmo gMisc.cmo gTree.cmo gList.cmo gWindow.cmo gBin.cmo \
	gEdit.cmo gRange.cmo gUtil.cmo gToolbox.cmo
THOBJS = gtkThread.cmo
INITOBJS = gtkInit.cmo
THINITOBJS = gtkThInit.cmo
ALLOBJS = $(MLOBJS) $(GLMLOBJS) $(GNOMEMLOBJS) $(GLADEMLOBJS) \
	$(RSVGMLOBJS) $(GNOMECANVASMLOBJS) $(INITOBJS)
ALLTHOBJS = $(THOBJS) $(THINITOBJS)

lablgtktop$(EXE): $(CLIBS) $(MLLIBS) $(INITOBJS)
	$(TOPLEVEL) -o $@ $(MLLINK) -I . $(MLLIBS) $(INITOBJS)

lablgtktop_t$(EXE): $(CLIBS) $(MLLIBS) $(THOBJS) $(INITOBJS) $(THINITOBJS)
	$(TOPLEVEL) $(THFLAGS) -o $@ $(THLINK) $(MLLINK) \
	   -I . $(MLLIBS) $(THOBJS) $(INITOBJS) $(THINITOBJS)

lablgtkopt: $(CLIBS) $(MLLIBS:.cma=.cmxa) $(INITOBJS:.cmo=.cmx) \
	$(THOBJS:.cmo=.cmx)

lablgladecc$(EXE): xml_lexer.cmo lablgladecc.cmo
	$(LINKER) -o $@ $(MLLINK) xml_lexer.cmo lablgladecc.cmo

testcc: lablgladecc$(EXE) lablgtktop
	./lablgladecc -test > testcc.ml
	./lablgtktop testcc.ml
	rm -f testcc.ml

install:
	@if test -d "$(INSTALLDIR)"; then :; else mkdir -p "$(INSTALLDIR)"; fi
	@if test -d "$(BINDIR)"; then :; else mkdir -p "$(BINDIR)"; fi
	cp lablgtk2.bat "$(BINDIR)"
	cp $(ALLOBJS:.cmo=.cmi) "$(INSTALLDIR)"
	cp *.mli "$(INSTALLDIR)"
	cp $(ALLOBJS:.cmo=.ml) "$(INSTALLDIR)"
	cp $(MLLIBS) $(THOBJS) $(INITOBJS) $(THINITOBJS) "$(INSTALLDIR)"
	cp $(CLIBS) "$(INSTALLDIR)"
	cp $(CLIBS:lib%.lib=dll%.dll) "$(DLLDIR)"
	cp varcc *.h "$(INSTALLDIR)"
	if test -f lablgtk.cmxa; then \
	   cp $(MLLIBS:.cma=.cmxa) $(MLLIBS:.cma=.lib) \
	      $(INITOBJS:.cmo=.cmx) $(INITOBJS:.cmo=.obj) "$(INSTALLDIR)"; fi
	if test -f gtkThread.cmx; then \
	   cp $(THOBJS:.cmo=.cmx) $(THOBJS:.cmo=.obj) "$(INSTALLDIR)"; fi

liblablgtk2.lib: $(COBJS)
	$(MKLIB)$@ $(COBJS)
dlllablgtk2.dll: $(COBJS:.obj=.d.obj)
	$(MKDLL)$@ $(COBJS:.obj=.d.obj) $(GTKLIBS)
lablgtk.cma: liblablgtk2.lib dlllablgtk2.dll $(MLOBJS)
	$(LINKER) -a -o $@ $(MLOBJS) \
	  -dllib -llablgtk2 -cclib -llablgtk2 -cclib "$(GTKLIBS)"
lablgtk.cmxa: $(MLOBJS:.cmo=.cmx)
	$(LINKOPT) -a -o $@ $(MLOBJS:.cmo=.cmx) \
	  -cclib -llablgtk2 -cclib "$(GTKLIBS)"

# liblablglade2.lib: $(GLADECOBJS)
# 	$(MKLIB)$@ $(GLADECOBJS)
# dlllablglade2.dll: $(GLADECOBJS:.obj=.d.obj)
# 	$(MKDLL)$@ $(GLADECOBJS:.obj=.d.obj) liblablgtk2.lib $(GTKLIBS)
# lablglade.cma: liblablglade2.lib dlllablglade2.dll $(GLADEMLOBJS)
# 	$(LINKER) -a -o $@ $(GLADEMLOBJS) \
# 	  -dllib -llablglade2 -cclib -llablglade2 -dllib -llablgtk2 -cclib -llablgtk2 -cclib "$(GTKLIBS)"
# lablglade.cmxa: liblablglade2.lib dlllablglade2.dll $(GLADEMLOBJS:.cmo=.cmx)
# 	$(LINKOPT) -a -o $@ $(GLADEMLOBJS:.cmo=.cmx) \
# 	  -dllib -llablglade2 -cclib -llablglade2 -dllib -llablgtk2 -cclib -llablgtk2 -cclib "$(GTKLIBS)"
# 
gtkThread.cmo: gtkThread.ml
	$(COMPILER) $(THFLAGS) gtkThread.ml

gtkThread.cmi: gtkThread.mli
	$(COMPILER) $(THFLAGS) gtkThread.mli

gtkThread.cmx: gtkThread.ml
	$(COMPOPT) $(THFLAGS) gtkThread.ml

xml_lexer.ml: xml_lexer.mll
	$(OCAMLLEX) xml_lexer.mll
xml_lexer.cmo xml_lexer.cmx : xml_lexer.cmi

varcc: varcc.cmo
	$(LINKER) -o $@ $<
	rm -f *_tags.h *_tags.c

clean:
	rm -f *.cm* *.obj *.lib *_tags.[ch] $(TARGETS) varcc.ml xml_lexer.ml

srcdoc: $(ALLOBJS)
	mkdir -p doc
	$(OCAMLDOC) -html -t "Lablgtk2" -d doc -I . `ls $(ALLOBJS:.cmo=.mli) 2> /dev/null`

$(GTKOBJS): pango_tags.h gtk_tags.h ml_gtk.h gdk_tags.h ml_gdk.h \
	    ml_gobject.h ml_glib.h wrappers.h
ml_glib.obj: glib_tags.h ml_glib.h wrappers.h
ml_gobject.obj: gobject_tags.h wrappers.h
ml_gdk.obj: gdk_tags.h ml_gdk.h ml_gpointer.h ml_pango.h wrappers.h
ml_gtk.obj ml_gtktext.obj: ml_pango.h
ml_gtkgl.obj: gtkgl_tags.h ml_gtk.h ml_gdk.h wrappers.h
ml_gtkxmhtml.obj: gtkxmhtml_tags.h ml_gtk.h ml_gdk.h wrappers.h
ml_gpointer.obj: ml_gpointer.h
ml_gdkpixbuf.obj: gdkpixbuf_tags.h ml_gdk.h gdk_tags.h wrappers.h ml_gpointer.h
ml_pango.obj: pango_tags.h ml_pango.h
ml_rsvg.obj: ml_gobject.h ml_gdkpixbuf.h wrappers.h
ml_gnomecanvas.obj: ml_gtk.h ml_gobject.h wrappers.h

include .depend
